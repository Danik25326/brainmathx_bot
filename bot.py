import os
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from sympy import symbols, Eq, solve, diff, integrate, sin, cos, tan, log, sqrt, pi

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher(storage=MemoryStorage())

x = symbols('x')

def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")
    equation_str = equation_str.replace("‚àö(", "sqrt(")
    equation_str = equation_str.replace("Sqrt", "sqrt")
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)
    equation_str = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', equation_str)
    return equation_str

def format_expression(expr):
    return str(expr).replace("**", "^").replace("*", "")

async def set_menu():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?")
    ])

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")],
        [InlineKeyboardButton(text="üìà –ü–æ—Ö—ñ–¥–Ω—ñ", callback_data="derivative"),
         InlineKeyboardButton(text="üîÑ –Ü–Ω—Ç–µ–≥—Ä–∞–ª–∏", callback_data="integral")]
    ])
    await message.answer("üëã **–í—ñ—Ç–∞—é!** –¶–µ BrainMathX ‚Äì –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤!", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    responses = {
        "equation": "üìè **–í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `2x + 3 = 7`)**",
        "inequality": "üìä **–í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `x^2 > 4`)**",
        "trigonometry": "üìê **–í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `sin(pi/4) + cos(pi/3)`)**",
        "logarithm": "üìö **–í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `log_2(8)`)**",
        "derivative": "üìà **–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ö—ñ–¥–Ω–æ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `diff(x^2 + 3x)`)**",
        "integral": "üîÑ **–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `integrate(x^2 + 3x)`)**"
    }
    await callback_query.message.answer(responses.get(callback_query.data, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"))
    await callback_query.answer()

@dp.message()
async def solve_math(message: types.Message):
    user_input = message.text.strip()
    if user_input.startswith("/"):
        return
    
    try:
        expression = fix_equation(user_input)
        
        if "=" in expression:
            left, right = expression.split("=")
            equation = Eq(eval(left, {"x": x}), eval(right, {"x": x}))
            solution = solve(equation, x)
            await message.answer(f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫:** `x = {solution}` ‚úÖ")
        elif user_input.startswith("diff("):
            expr = eval(user_input[5:-1], {"x": x})
            derivative = diff(expr, x)
            await message.answer(f"üìà **–ü–æ—Ö—ñ–¥–Ω–∞:** `{format_expression(derivative)}` ‚úÖ")
        elif user_input.startswith("integrate("):
            expr = eval(user_input[9:-1], {"x": x})
            integral = integrate(expr, x)
            await message.answer(f"üîÑ **–Ü–Ω—Ç–µ–≥—Ä–∞–ª:** `{format_expression(integral)}` ‚úÖ")
        else:
            result = eval(expression, {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})
            await message.answer(f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** `{format_expression(result)}` ‚úÖ")
    except Exception as e:
        await message.answer(f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {e}")

async def main():
    await set_menu()
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
