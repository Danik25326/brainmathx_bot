import os
import asyncio
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Update
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, MenuButtonCommands
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi, diff, integrate, sympify

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

x = symbols('x')

def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")  # –°—Ç–µ–ø—ñ–Ω—å
    equation_str = equation_str.replace("‚àö(", "sqrt(").replace("Sqrt", "sqrt")  # –ö–≤–∞–¥—Ä–∞—Ç–Ω–∏–π –∫–æ—Ä—ñ–Ω—å
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)  # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏
    equation_str = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', equation_str)  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –º–Ω–æ–∂–µ–Ω–Ω—è (2x -> 2*x)
    equation_str = re.sub(r'(\d)!', r'factorial(\1)', equation_str)  # –§–∞–∫—Ç–æ—Ä—ñ–∞–ª (5! -> factorial(5))
    return equation_str

async def solve_expression(expression):
    try:
        expression = fix_equation(expression)
        parsed_expr = sympify(expression, locals={"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})
        return eval(str(parsed_expr), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")],
        [InlineKeyboardButton(text="üìà –ü–æ—Ö—ñ–¥–Ω–∞", callback_data="derivative"),
         InlineKeyboardButton(text="üìâ –Ü–Ω—Ç–µ–≥—Ä–∞–ª", callback_data="integral")]
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ BrainMathX ‚Äì –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤!", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    prompts = {
        "equation": "‚úèÔ∏è –í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2x + 3 = 7)",
        "inequality": "üìä –í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^2 - 4 > 0)",
        "trigonometry": "üìê –í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, sin(30) + cos(60))",
        "logarithm": "üìö –í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, log_2(8))",
        "derivative": "üìà –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ—Ö—ñ–¥–Ω–æ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^3 + 2x)",
        "integral": "üìâ –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^3 + 2x)"
    }
    await callback_query.message.answer(prompts.get(data, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"))
    await callback_query.answer()

@dp.message()
async def handle_math(message: types.Message):
    if message.text.startswith("/"):
        return
    response = await solve_expression(message.text.strip())
    await message.answer(f"üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å: <code>{response}</code>")

async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown():
    await bot.delete_webhook()

async def handle_update(request):
    update_data = await request.json()
    update = Update.model_validate(update_data)
    await dp._process_update(bot, update)
    return web.Response()

app = web.Application()
app.router.add_post("/webhook", handle_update)

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)
