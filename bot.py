import os
import re
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt
from sympy.parsing.sympy_parser import transformations, standard_transformations
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters.command import Command
import asyncio

# üîπ –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ Environment Variables
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –û–≥–æ–ª–æ—à—É—î–º–æ –∑–º—ñ–Ω–Ω—É x (–æ—Å–Ω–æ–≤–Ω—É –∑–º—ñ–Ω–Ω—É –¥–ª—è —Ä—ñ–≤–Ω—è–Ω—å)
x = symbols('x')

def fix_equation(equation_str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    equation_str = equation_str.replace("^", "**")  # 2^x ‚Üí 2**x
    equation_str = equation_str.replace("‚àö(", "sqrt(")  # ‚àö(x) ‚Üí sqrt(x)
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)  # log_2(8) ‚Üí log(8,2)
    return equation_str

def solve_math_expression(expression_str):
    """–†–æ–∑–ø—ñ–∑–Ω–∞—î —ñ —Ä–æ–∑–≤‚Äô—è–∑—É—î —Ä—ñ–≤–Ω—è–Ω–Ω—è, –Ω–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ –∞–±–æ –≤–∏—Ä–∞–∑–∏"""
    try:
        expression_str = fix_equation(expression_str)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–º—ñ—Å—Ç–∏—Ç—å "=")
        if "=" in expression_str:
            left, right = expression_str.split("=")
            equation = Eq(eval(left.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}),
                          eval(right.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}))
            solution = solve(equation, x)
            return f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫ —Ä—ñ–≤–Ω—è–Ω–Ω—è:** x = {solution}"
        
        # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, sin(30) + cos(60))
        else:
            result = eval(expression_str, {"x": x, "sin": lambda a: sin(a * pi / 180).evalf(),
                                           "cos": lambda a: cos(a * pi / 180).evalf(),
                                           "tan": lambda a: tan(a * pi / 180).evalf(),
                                           "log": log, "sqrt": sqrt, "pi": pi})
            return f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** {result}"

    except Exception as e:
        return f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {e}"
        
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("üëã **–í—ñ—Ç–∞—é!** –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∏ –≤–∏—Ä–∞–∑, —ñ —è –π–æ–≥–æ —Ä–æ–∑–≤‚Äô—è–∂—É! \n\n"
                         "üìå **–Ø–∫ –≤–≤–æ–¥–∏—Ç–∏:**\n"
                         "- `2^x = 8` (—Å—Ç–µ–ø—ñ–Ω—å)\n"
                         "- `sqrt(x) = 4` (–∫–æ—Ä—ñ–Ω—å)\n"
                         "- `log_2(8) = x` (–ª–æ–≥–∞—Ä–∏—Ñ–º)\n"
                         "- `sin(x) + cos(x) = 1` (—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è)")

@dp.message()
async def solve_math(message: Message):
    result = solve_math_expression(message.text)
    await message.answer(result)

async def main():
    await dp.start_polling(bot, skip_updates=True)  # ‚úÖ –î–æ–¥–∞—î–º–æ skip_updates=True

if __name__ == "__main__":
    asyncio.run(main())

