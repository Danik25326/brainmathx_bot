import os
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, MenuButtonCommands
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN, parse_mode="Markdown")  
dp = Dispatcher()

x = symbols('x')  # –û—Å–Ω–æ–≤–Ω–∞ –∑–º—ñ–Ω–Ω–∞

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
async def set_menu():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?"),
        BotCommand(command="equation", description="–†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è"),
        BotCommand(command="inequality", description="–†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å"),
        BotCommand(command="trigonometry", description="–û–±—á–∏—Å–ª–∏—Ç–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—é"),
        BotCommand(command="logarithm", description="–û–±—á–∏—Å–ª–∏—Ç–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º"),
        BotCommand(command="donate", description="–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ üí∞")
    ])
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())  

# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")]
    ])
    
    await message.answer("üëã **–í—ñ—Ç–∞—é!** –¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –±–æ—Ç 2.0! –í–∏–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à —Ä–æ–∑–≤‚Äô—è–∑–∞—Ç–∏:", 
                         reply_markup=keyboard)

# üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.answer("üìå **–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞?**\n"
                         "- –í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `2x + 3 = 7`\n"
                         "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `sqrt(x)` –¥–ª—è –∫–æ—Ä–µ–Ω—ñ–≤\n"
                         "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `log_2(x)` –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ–≤\n"
                         "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `sin(x)`, `cos(x)`, `tan(x)` –¥–ª—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—ó")

# üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤
def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")  
    equation_str = equation_str.replace("‚àö(", "sqrt(")  
    equation_str = equation_str.replace("Sqrt", "sqrt")  
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)  

    equation_str = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', equation_str)

    return equation_str

# üìå –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
@dp.message()
async def solve_math(message: types.Message):
    try:
        expression = fix_equation(message.text.strip())

        # ‚úÖ –Ø–∫—â–æ —î "=", —Ü–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è ‚Üí –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `solve()`
        if "=" in expression:
            left, right = expression.split("=")
            equation = Eq(eval(left.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}),
                          eval(right.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}))
            solution = solve(equation, x)
            await message.answer(f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫:** `x = {solution}` ‚úÖ")

        # ‚úÖ –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –≤–∏—Ä–∞–∑ ‚Üí —Ä–∞—Ö—É—î–º–æ —á–µ—Ä–µ–∑ `eval()`
        else:
            result = eval(expression, {"x": x, "sin": lambda a: sin(a * pi / 180).evalf(),
                                       "cos": lambda a: cos(a * pi / 180).evalf(),
                                       "tan": lambda a: tan(a * pi / 180).evalf(),
                                       "log": log, "sqrt": sqrt, "pi": pi})
            await message.answer(f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** `{result}` ‚úÖ")
    
    except Exception as e:
        await message.answer(f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {e}")

# üìå –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "equation":
        await callback_query.message.answer("üìè **–í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `2x + 3 = 7`)**")
    elif data == "inequality":
        await callback_query.message.answer("üìä **–í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `x^2 > 4`)**")
    elif data == "trigonometry":
        await callback_query.message.answer("üìê **–í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `sin(30) + cos(60)`)**")
    elif data == "logarithm":
        await callback_query.message.answer("üìö **–í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `log_2(8)`)**")
    
    await callback_query.answer()  

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_menu()  
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())

