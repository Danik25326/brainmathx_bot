import os
import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import MenuButtonCommands
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN, parse_mode="Markdown")  # Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
dp = Dispatcher()

x = symbols('x')  # –û—Å–Ω–æ–≤–Ω–∞ –∑–º—ñ–Ω–Ω–∞

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
def main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")]
    ])
    return keyboard

# üìå –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")  # 2^x ‚Üí 2**x
    equation_str = equation_str.replace("‚àö(", "sqrt(")  # ‚àö(x) ‚Üí sqrt(x)
    equation_str = equation_str.replace("Sqrt", "sqrt")  # Sqrt(x) ‚Üí sqrt(x)
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)  # log_2(x) ‚Üí log(x, 2)
    return equation_str

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
def solve_math_expression(expression_str):
    try:
        expression_str = fix_equation(expression_str)  # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è
        if "=" in expression_str:
            left, right = expression_str.split("=")
            equation = Eq(eval(left.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}),
                          eval(right.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}))
            solution = solve(equation, x)
            return f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫ —Ä—ñ–≤–Ω—è–Ω–Ω—è:**\n\n*x* = `{solution}` ‚úÖ"
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤–∏—Ä–∞–∑—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, sin(30) + cos(60))
        else:
            result = eval(expression_str, {"x": x, "sin": lambda a: sin(a * pi / 180).evalf(),
                                           "cos": lambda a: cos(a * pi / 180).evalf(),
                                           "tan": lambda a: tan(a * pi / 180).evalf(),
                                           "log": log, "sqrt": sqrt, "pi": pi})
            return f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** `{result}` ‚úÖ"

    except Exception as e:
        return f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** `{e}`"

# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã **–í—ñ—Ç–∞—é!** –¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –±–æ—Ç 2.0! –í–∏–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à —Ä–æ–∑–≤‚Äô—è–∑–∞—Ç–∏:", 
        reply_markup=main_keyboard()
    )

# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "equation":
        await callback_query.message.answer("üìè **–í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `2x + 3 = 7`)**")
    elif data == "inequality":
        await callback_query.message.answer("üìä **–í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `x^2 > 4`)**")
    elif data == "trigonometry":
        await callback_query.message.answer("üìê **–í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `sin(30) + cos(60)`)**")
    elif data == "logarithm":
        await callback_query.message.answer("üìö **–í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `log_2(8)`)**")
    
    # ‚úÖ –í–ê–ñ–õ–ò–í–û! –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è, —â–æ–± –±–æ—Ç –Ω–µ –¥—É–±–ª—é–≤–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await callback_query.answer()

# üìå –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def solve_math(message: types.Message):
    result = solve_math_expression(message.text)
    await message.answer(result)

async def set_menu():
    await bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        types.BotCommand("help", "–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?"),
        types.BotCommand("equation", "–†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è"),
        types.BotCommand("inequality", "–†–æ–∑–≤‚Äô—è–∑–∞—Ç–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å"),
        types.BotCommand("trigonometry", "–û–±—á–∏—Å–ª–∏—Ç–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—é"),
        types.BotCommand("logarithm", "–û–±—á–∏—Å–ª–∏—Ç–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º"),
        types.BotCommand("donate", "–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ üí∞")
    ])
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫

# üìå –î–æ–¥–∞—î–º–æ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    await set_menu()  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
