import os
import asyncio
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi, diff, integrate, sympify

from aiogram.client.default import DefaultBotProperties  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è aiogram 3.4.1

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

x = symbols('x')

def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")
    equation_str = equation_str.replace("‚àö(", "sqrt(").replace("Sqrt", "sqrt")
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)
    equation_str = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', equation_str)
    equation_str = re.sub(r'(\d)!', r'factorial(\1)', equation_str)
    return equation_str

async def solve_expression(expression):
    try:
        expression = fix_equation(expression)
        parsed_expr = sympify(expression, locals={"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})
        result = parsed_expr.evalf()  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ evalf() –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è

        if isinstance(result, float):
            result = round(result, 6)  # –û–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
        return str(result)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

async def solve_equation(equation):
    try:
        equation = fix_equation(equation)
        left, right = equation.split("=")
        solution = solve(Eq(sympify(left), sympify(right)), x)
        return f"–†–æ–∑–≤‚Äô—è–∑–æ–∫: {solution}"
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

async def calculate_derivative(expression):
    try:
        expression = fix_equation(expression)
        parsed_expr = sympify(expression)
        derivative = diff(parsed_expr, x)
        return f"–ü–æ—Ö—ñ–¥–Ω–∞: {derivative}"
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

async def calculate_integral(expression):
    try:
        expression = fix_equation(expression)
        parsed_expr = sympify(expression)
        integral = integrate(parsed_expr, x)
        return f"–Ü–Ω—Ç–µ–≥—Ä–∞–ª: {integral} + C"
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞: {e}"

async def send_math_result(message: types.Message, response: str):
    try:
        await message.answer(f"üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å: <code>{response}</code>")
    except:
        await message.answer(f"üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response}")

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")],
        [InlineKeyboardButton(text="üìà –ü–æ—Ö—ñ–¥–Ω–∞", callback_data="derivative"),
         InlineKeyboardButton(text="üìâ –Ü–Ω—Ç–µ–≥—Ä–∞–ª", callback_data="integral")]
    ])
    await message.answer("üëã –í—ñ—Ç–∞—é! –¶–µ BrainMathX ‚Äì –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤!", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    prompts = {
        "equation": "‚úèÔ∏è –í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2x + 3 = 7)",
        "inequality": "üìä –í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^2 - 4 > 0)",
        "trigonometry": "üìê –í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, sin(pi/6) + cos(pi/3))",
        "logarithm": "üìö –í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, log_2(8))",
        "derivative": "üìà –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ—Ö—ñ–¥–Ω–æ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^3 + 2x)",
        "integral": "üìâ –í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, x^3 + 2x)"
    }
    await callback_query.message.answer(prompts.get(data, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞"))
    await callback_query.answer()

@dp.message()
async def handle_math(message: types.Message):
    if message.text.startswith("/"):
        return

    text = message.text.strip()
    
    if "=" in text:
        response = await solve_equation(text)
    elif "d/dx" in text:
        expression = text.replace("d/dx", "").strip()
        response = await calculate_derivative(expression)
    elif "‚à´" in text:
        expression = text.replace("‚à´", "").strip()
        response = await calculate_integral(expression)
    else:
        response = await solve_expression(text)

    await send_math_result(message, response)

async def on_startup():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown():
    await bot.delete_webhook()

async def handle_update(request):
    update = await request.json()
    await dp.feed_update(bot, types.Update(**update))
    return web.Response()

app = web.Application()
app.router.add_post("/webhook", handle_update)

async def main():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print(f"‚úÖ Webhook –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    await asyncio.Event().wait()  # –ó–∞–ø–æ–±—ñ–≥–∞—î –≤–∏—Ö–æ–¥—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    asyncio.run(main())
