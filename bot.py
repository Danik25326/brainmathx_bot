import os
import asyncio
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, MenuButtonCommands
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi, diff, integrate

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TOKEN, parse_mode="HTML")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML
dp = Dispatcher()

x = symbols('x')

async def handle(request):
    return web.Response(text="Bot is running!")

async def start_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()
    print("üåç –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")

async def set_menu():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?")
    ])
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")],
        [InlineKeyboardButton(text="üìà –ü–æ—Ö—ñ–¥–Ω–∞", callback_data="derivative"),
         InlineKeyboardButton(text="üìâ –Ü–Ω—Ç–µ–≥—Ä–∞–ª", callback_data="integral")]
    ])
    await message.answer("üëã <b>–í—ñ—Ç–∞—é!</b> –¶–µ BrainMathX ‚Äì –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤!\n\n"
                         "üìå <b>–©–æ —è –≤–º—ñ—é?</b>\n"
                         "- –†–æ–∑–≤‚Äô—è–∑—É–≤–∞—Ç–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>2x + 3 = 7</code>)\n"
                         "- –ü—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞–º–∏ (<code>log_2(8) = x</code>)\n"
                         "- –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è (<code>sin(30) + cos(60)</code>)\n"
                         "- –û–±—á–∏—Å–ª—é–≤–∞—Ç–∏ –ø–æ—Ö—ñ–¥–Ω—ñ —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∏!\n\n"
                         "üîπ –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à —Ä–æ–∑–≤‚Äô—è–∑–∞—Ç–∏:", reply_markup=keyboard)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "derivative":
        await callback_query.message.answer("üìà <b>–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ—Ö—ñ–¥–Ω–æ—ó</b> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>x**3 + 2*x</code>):")
    elif data == "integral":
        await callback_query.message.answer("üìâ <b>–í–≤–µ–¥–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>x**3 + 2*x</code>):")
    await callback_query.answer()

def fix_equation(equation_str):
    equation_str = equation_str.replace("^", "**")  # –ó–∞–º—ñ–Ω–∞ ^ –Ω–∞ **
    equation_str = equation_str.replace("‚àö(", "sqrt(")  
    equation_str = equation_str.replace("Sqrt", "sqrt")  
    equation_str = re.sub(r'log_(\d+)\((.*?)\)', r'log(\2, \1)', equation_str)  
    equation_str = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', equation_str)  # –î–æ–¥–∞—î –º–Ω–æ–∂–µ–Ω–Ω—è –º—ñ–∂ —á–∏—Å–ª–æ–º —ñ –∑–º—ñ–Ω–Ω–æ—é
    return equation_str

@dp.message()
async def solve_math(message: types.Message):
    user_input = message.text.strip()
    
    if user_input.startswith("/"):
        return
    
    try:
        expression = fix_equation(user_input)
        parsed_expr = eval(expression, {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})

        if "**" in expression or "diff" in expression:
            result = diff(parsed_expr, x)
            explanation = f"üìå <b>–ü–æ—Ö—ñ–¥–Ω–∞</b> <code>{user_input}</code>:\n\n"
            explanation += "1Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª–æ —Å—Ç–µ–ø–µ–Ω—è: d/dx [x‚Åø] = n * x^(n-1)\n"
            explanation += f"üéØ –í—ñ–¥–ø–æ–≤—ñ–¥—å: <code>{result}</code>"
            await message.answer(explanation)

        elif "integrate" in expression or "**" in expression:
            result = integrate(parsed_expr, x)
            explanation = f"üìå <b>–Ü–Ω—Ç–µ–≥—Ä–∞–ª</b> <code>{user_input}</code>:\n\n"
            explanation += "1Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó.\n"
            explanation += f"üéØ –í—ñ–¥–ø–æ–≤—ñ–¥—å: <code>{result} + C</code>"
            await message.answer(explanation)

        else:
            result = eval(expression, {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi})
            await message.answer(f"üî¢ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å:</b> <code>{result}</code> ‚úÖ")

    except Exception as e:
        await message.answer(f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {e}")

async def main():
    await set_menu()
    await asyncio.gather(
        start_server(),
        dp.start_polling(bot, skip_updates=True)
    )

if __name__ == "__main__":
    asyncio.run(main())
