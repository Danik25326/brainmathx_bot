import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ë–µ—Ä–µ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞

bot = Bot(token=TOKEN, parse_mode="Markdown")  # –î–æ–¥–∞—î–º–æ Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
dp = Dispatcher()

x = symbols('x')  # –û—Å–Ω–æ–≤–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Ä—ñ–≤–Ω—è–Ω—å

# üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
def main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üìö –õ–æ–≥–∞—Ä–∏—Ñ–º–∏", callback_data="logarithm")]
    ])
    return keyboard

# üìå –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—á–∏—Å–ª–µ–Ω—å
def solve_math_expression(expression_str):
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–º—ñ—Å—Ç–∏—Ç—å "=")
        if "=" in expression_str:
            left, right = expression_str.split("=")
            equation = Eq(eval(left.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}),
                          eval(right.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}))
            solution = solve(equation, x)
            return f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫ —Ä—ñ–≤–Ω—è–Ω–Ω—è:**\n\n*x* = `{solution}` ‚úÖ"
        
        # –ü—Ä–æ—Å—Ç–æ –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, sin(30) + cos(60))
        else:
            result = eval(expression_str, {"x": x, "sin": lambda a: sin(a * pi / 180).evalf(),
                                           "cos": lambda a: cos(a * pi / 180).evalf(),
                                           "tan": lambda a: tan(a * pi / 180).evalf(),
                                           "log": log, "sqrt": sqrt, "pi": pi})
            return f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** `{result}` ‚úÖ"

    except Exception as e:
        return f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** `{e}`"

# üìå –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã **–í—ñ—Ç–∞—é!** –¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –±–æ—Ç 2.0! –í–∏–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à —Ä–æ–∑–≤‚Äô—è–∑–∞—Ç–∏:", 
        reply_markup=main_keyboard()
    )

# üìå –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "equation":
        await callback_query.message.answer("üìè **–í–≤–µ–¥–∏ —Ä—ñ–≤–Ω—è–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `2x + 3 = 7`)**")
    elif data == "inequality":
        await callback_query.message.answer("üìä **–í–≤–µ–¥–∏ –Ω–µ—Ä—ñ–≤–Ω—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `x^2 > 4`)**")
    elif data == "trigonometry":
        await callback_query.message.answer("üìê **–í–≤–µ–¥–∏ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏–π –≤–∏—Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `sin(30) + cos(60)`)**")
    elif data == "logarithm":
        await callback_query.message.answer("üìö **–í–≤–µ–¥–∏ –ª–æ–≥–∞—Ä–∏—Ñ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `log_2(8)`)**")

# üìå –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def solve_math(message: types.Message):
    result = solve_math_expression(message.text)
    await message.answer(result)

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot, skip_updates=True)  # ‚úÖ –î–æ–¥–∞—î–º–æ skip_updates=True –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤

if __name__ == "__main__":
    asyncio.run(main())
