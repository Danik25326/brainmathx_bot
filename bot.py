import os
import asyncio
import re
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, MenuButtonCommands
from sympy import symbols, Eq, solve, sin, cos, tan, log, sqrt, pi

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN, parse_mode="Markdown")
dp = Dispatcher()

x = symbols('x')  # –û—Å–Ω–æ–≤–Ω–∞ –∑–º—ñ–Ω–Ω–∞

# üìå –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_FILE = "users.json"

# üìå –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
def load_users():
    try:
        with open(USERS_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_users(users):
    with open(USERS_FILE, "w") as file:
        json.dump(users, file, indent=4)

# üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def update_user_limits(user_id):
    users = load_users()
    today = datetime.now().strftime("%Y-%m-%d")

    if user_id not in users:
        users[user_id] = {"date": today, "count": 0, "premium": False}

    if users[user_id]["date"] != today:
        users[user_id]["date"] = today
        users[user_id]["count"] = 0

    users[user_id]["count"] += 1
    save_users(users)
    return users[user_id]

# üìå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª—ñ–º—ñ—Ç—É
def is_limited(user_id):
    users = load_users()
    user = users.get(user_id, {"count": 0, "premium": False})
    return user["count"] >= 10 and not user["premium"]

# üìå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Pro-–≤–µ—Ä—Å—ñ—ó
def is_premium(user_id):
    users = load_users()
    return users.get(user_id, {}).get("premium", False)

# üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ Pro
def upgrade_to_premium(user_id):
    users = load_users()
    if user_id not in users:
        users[user_id] = {"date": datetime.now().strftime("%Y-%m-%d"), "count": 0, "premium": True}
    else:
        users[user_id]["premium"] = True
    save_users(users)

# üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìè –†—ñ–≤–Ω—è–Ω–Ω—è", callback_data="equation"),
         InlineKeyboardButton(text="üìä –ù–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ", callback_data="inequality")],
        [InlineKeyboardButton(text="üìê –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è", callback_data="trigonometry"),
         InlineKeyboardButton(text="üíé –û—Ç—Ä–∏–º–∞—Ç–∏ Pro", callback_data="premium")]
    ])
    
    await message.answer("üëã **–í—ñ—Ç–∞—é!** –¶–µ BrainMathX! –í–∏–±–µ—Ä–∏, —â–æ —Ç–∏ —Ö–æ—á–µ—à —Ä–æ–∑–≤‚Äô—è–∑–∞—Ç–∏:", reply_markup=keyboard)

# üìå –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /premium
@dp.message(Command("premium"))
async def send_premium_info(message: types.Message):
    await message.answer("üíé **–Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ Pro-–≤–µ—Ä—Å—ñ—é?**\n"
                         "üîπ –ö—É–ø–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É (–¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å)\n"
                         "üîπ –ê–±–æ —á–µ–∫–∞—Ç–∏ 24 –≥–æ–¥–∏–Ω–∏, —â–æ–± –ª—ñ–º—ñ—Ç –æ–±–Ω—É–ª–∏–≤—Å—è\n\n"
                         "**–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ Pro:**\n"
                         "üîπ Monobank: `https://send.monobank.ua/jar/–¢–í–û–Ñ_–ü–û–°–ò–õ–ê–ù–ù–Ø`\n"
                         "üîπ PayPal: [–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ PayPal](–¢–í–û–Ñ_–ü–û–°–ò–õ–ê–ù–ù–Ø)\n"
                         "üîπ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫: [–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç](–¢–í–û–Ñ_–ü–û–°–ò–õ–ê–ù–ù–Ø_–ù–ê_–ë–ê–ù–ö–£)")

# üìå –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ–≤
def check_log_access(user_id):
    if not is_premium(user_id):
        return False
    return True

# üìå –û–±—Ä–æ–±–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤
@dp.message()
async def solve_math(message: types.Message):
    user_id = str(message.from_user.id)

    # üìå –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ª–æ–≥–∞—Ä–∏—Ñ–º—ñ–≤ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    if "log" in message.text and not check_log_access(user_id):
        await message.answer("üö´ **–õ–æ–≥–∞—Ä–∏—Ñ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ Pro-–≤–µ—Ä—Å—ñ—ó.**\n"
                             "–û—Ç—Ä–∏–º–∞–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ /premium –∞–±–æ –∑–∞—á–µ–∫–∞–π 24 –≥–æ–¥–∏–Ω–∏.")
        return

    # üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    if is_limited(user_id):
        await message.answer("‚è≥ **–¢–∏ –≤–∏—á–µ—Ä–ø–∞–≤ 10 —Ä—ñ—à–µ–Ω—å –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.**\n"
                             "–û—Ç—Ä–∏–º–∞–π Pro —á–µ—Ä–µ–∑ /premium –∞–±–æ –∑–∞—á–µ–∫–∞–π 24 –≥–æ–¥–∏–Ω–∏.")
        return

    try:
        update_user_limits(user_id)
        expression = re.sub(r'(\d)([a-zA-Z])', r'\1*\2', message.text.replace("^", "**"))
        if "=" in expression:
            left, right = expression.split("=")
            equation = Eq(eval(left.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}),
                          eval(right.strip(), {"x": x, "sin": sin, "cos": cos, "tan": tan, "log": log, "sqrt": sqrt, "pi": pi}))
            solution = solve(equation, x)
            await message.answer(f"‚úèÔ∏è **–†–æ–∑–≤‚Äô—è–∑–æ–∫:** `x = {solution}` ‚úÖ")
        else:
            result = eval(expression, {"x": x, "sin": lambda a: sin(a * pi / 180).evalf(),
                                       "cos": lambda a: cos(a * pi / 180).evalf(),
                                       "tan": lambda a: tan(a * pi / 180).evalf(),
                                       "log": log, "sqrt": sqrt, "pi": pi})
            await message.answer(f"üî¢ **–í—ñ–¥–ø–æ–≤—ñ–¥—å:** `{result}` ‚úÖ")

    except Exception as e:
        await message.answer(f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {e}")

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())


